---
import GoogleAnalytics from "src/components/GoogleAnalytics.astro";
import "../styles/index.css";
import HCaptcha from "src/components/HCaptcha.astro";
import CookieConsent from "src/components/CookieConsent.tsx";
import { format } from "date-fns";
import defaultOgImage from "src/assets/default-og-image.png";
import { getImage } from "astro:assets";

type Props = {
  title?: string;
  description?: string;
  author?: string;
  canonicalURL: string;
  publishDate?: Date;
  modifiedDate?: Date;
  type?: string;
  openGraph?: {
    image?: string;
    altText?: string;
    width?: number;
    height?: number;
    format?: string;
  };
};

const {
  title = "Michał Skorus | Web Developer Portfolio",
  description="Discover the portfolio of Michał Skorus, a web developer who combines creativity with technology to create performant, modern and responsive websites. Explore projects that stand out for their aesthetics, functionality, and innovative solutions. Get in touch to learn more!",
  canonicalURL,
  type = 'website',
  author = "Michał Skorus",
  publishDate = new Date(),
  modifiedDate = new Date(),
  openGraph: {image: ogImage = null, altText: ogAltText="", width: ogWidth = 1200, height: ogHeight = 630, format: ogFormat = "jpg"} = {}
} = Astro.props;

const defaultImage = await getImage({src: defaultOgImage, width: 1200, height: 630});

const openGraph = {
  src: ogImage ?? new URL(defaultImage.src, Astro.site).toString(),
  alt: ogAltText ?? description,
  width: ogWidth ?? defaultImage.attributes.width,
  height: ogHeight ?? defaultImage.attributes.height,
  format: ogFormat ?? defaultOgImage.format,
}
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#262626" />
    <meta name="msapplication-TileColor" content="#FEF8EC" />
    <meta name="theme-color" content="#262626" />
		<meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
		<title>{title}</title>
    <meta property="og:url" content={canonicalURL}>
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:creator" content="@michsko544">
    <meta name="twitter:site" content="@michsko544">
    <meta property="og:image" content={openGraph.src}>
    <meta property="og:image:secure_url" content={openGraph.src}>
    <meta property="og:image:alt" content={openGraph.alt}>
    <meta property="og:image:type" content={`image/${openGraph.format}`}>
    <meta property="og:image:width" content={openGraph.width.toString()}>
    <meta property="og:image:height" content={openGraph.height.toString()}>
    <meta name="twitter:title" content={title}>
    <meta name="twitter:description" content={description}>
    <meta name="twitter:image" content={openGraph.src}>
    <meta name="description" content={description}>
    <meta name="author" content={author}>
    <meta property="og:title" content={title}>
    <meta property="og:description" content={description}>
    <meta property="og:locale" content="en">
    <meta property="og:type" content={type}>
    {type === 'article' &&
      <meta property="article:published_time" content={format(publishDate, "yyyy-MM-dd'T'HH:mm:ssXXX")}>
      <meta property="article:modified_time" content={format(modifiedDate, "yyyy-MM-dd'T'HH:mm:ssXXX")}>
      <meta property="article:author" content={author}>
    }
    <link rel="canonical" href={canonicalURL}>
    <link rel="sitemap" href="/sitemap-index.xml">
    <script is:inline>
      var isDarkMode = function() {
        return localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches);
      }
      var initTheme = function(){
        if (isDarkMode()) {
          document.documentElement.setAttribute('data-theme-dark', "")
        } else {
          document.documentElement.removeAttribute('data-theme-dark')
        }
      }
      initTheme();
    </script>
    {import.meta.env.PROD && (
      <GoogleAnalytics />
    )}
    <HCaptcha />
	</head>
	<body>
    <slot/>
    <CookieConsent client:only="react"/>
	</body>
</html>
